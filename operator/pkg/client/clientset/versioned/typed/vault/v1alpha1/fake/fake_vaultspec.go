// Copyright Â© 2019 Banzai Cloud
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/banzaicloud/bank-vaults/operator/pkg/apis/vault/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeVaultSpecs implements VaultSpecInterface
type FakeVaultSpecs struct {
	Fake *FakeVaultV1alpha1
	ns   string
}

var vaultspecsResource = schema.GroupVersionResource{Group: "vault.banzaicloud.com", Version: "v1alpha1", Resource: "vaultspecs"}

var vaultspecsKind = schema.GroupVersionKind{Group: "vault.banzaicloud.com", Version: "v1alpha1", Kind: "VaultSpec"}

// Get takes name of the vaultSpec, and returns the corresponding vaultSpec object, and an error if there is any.
func (c *FakeVaultSpecs) Get(name string, options v1.GetOptions) (result *v1alpha1.VaultSpec, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(vaultspecsResource, c.ns, name), &v1alpha1.VaultSpec{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.VaultSpec), err
}

// List takes label and field selectors, and returns the list of VaultSpecs that match those selectors.
func (c *FakeVaultSpecs) List(opts v1.ListOptions) (result *v1alpha1.VaultSpecList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(vaultspecsResource, vaultspecsKind, c.ns, opts), &v1alpha1.VaultSpecList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.VaultSpecList), err
}

// Watch returns a watch.Interface that watches the requested vaultSpecs.
func (c *FakeVaultSpecs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(vaultspecsResource, c.ns, opts))

}

// Create takes the representation of a vaultSpec and creates it.  Returns the server's representation of the vaultSpec, and an error, if there is any.
func (c *FakeVaultSpecs) Create(vaultSpec *v1alpha1.VaultSpec) (result *v1alpha1.VaultSpec, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(vaultspecsResource, c.ns, vaultSpec), &v1alpha1.VaultSpec{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.VaultSpec), err
}

// Update takes the representation of a vaultSpec and updates it. Returns the server's representation of the vaultSpec, and an error, if there is any.
func (c *FakeVaultSpecs) Update(vaultSpec *v1alpha1.VaultSpec) (result *v1alpha1.VaultSpec, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(vaultspecsResource, c.ns, vaultSpec), &v1alpha1.VaultSpec{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.VaultSpec), err
}

// Delete takes name of the vaultSpec and deletes it. Returns an error if one occurs.
func (c *FakeVaultSpecs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(vaultspecsResource, c.ns, name), &v1alpha1.VaultSpec{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeVaultSpecs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(vaultspecsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.VaultSpecList{})
	return err
}

// Patch applies the patch and returns the patched vaultSpec.
func (c *FakeVaultSpecs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.VaultSpec, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(vaultspecsResource, c.ns, name, pt, data, subresources...), &v1alpha1.VaultSpec{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.VaultSpec), err
}
