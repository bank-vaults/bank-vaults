apiVersion: vault.banzaicloud.com/v1alpha1
kind: Vault
metadata:
  name: vault
spec:
  size: 1
  image: vault:1.3.1
  bankVaultsImage: banzaicloud/bank-vaults:master

  serviceAccount: vault

  # Vault Configurer Pods and Services annotations
  vaultConfigurerAnnotations:
    type/instance: "vaultconfigurer"
    # This may be required if you're using kube2iam to enable vault-configurer to decrypt secrets using the awskms template function
    # iam.amazonaws.com/role: "role-arn..."

  # Use local disk to store Vault file data, see config section.
  volumes:
    - name: vault-file
      persistentVolumeClaim:
        claimName: vault-file

  volumeMounts:
    - name: vault-file
      mountPath: /vault/file

  # Support for distributing the generated CA certificate Secret to other namespaces.
  # Define a list of namespaces or use ["*"] for all namespaces.
  caNamespaces:
    - "*"

  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:
    options:
      # The preFlightChecks flag enables unseal and root token storage tests
      # This is true by default
      preFlightChecks: true
    kubernetes:
      secretNamespace: default

  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    storage:
      file:
        path: /vault/file
    listener:
      tcp:
        address: 0.0.0.0:8200
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    ui: true

  # See: https://github.com/banzaicloud/bank-vaults#example-external-vault-configuration for more details.
  externalConfig:
    policies:
      - name: allow_secrets
        rules: |
          path "secret/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
          path "database/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
    auth:
      - type: kubernetes
        roles:
          # Allow every pod in the default namespace to use the secret kv store
          - name: default
            bound_service_account_names: ["default", "vault"]
            bound_service_account_namespaces: ["*"]
            policies: ["allow_secrets"]
            ttl: 1h

    secrets:
      - path: secret
        type: kv
        description: General secrets.
        options:
          version: 2
      - type: database
        description: mysql
        configuration:
          config:
          - name: mysql
            plugin_name: mysql-database-plugin
            max_open_connections: 5
            connection_url: "{{username}}:{{password}}@tcp(mysql:3306)/"
            allowed_roles: ['*']
            username: root
            password: '${ awskms (env `ENCRYPTED_DB_CREDS`) }'
            # You can use the `blob` function to read the encrypted value from S3 directly
            # Because `awskms` expects  base64-encoded content you need to store it in base64
            # or use Sprig's `b64enc` function: http://masterminds.github.io/sprig/encoding.html
            # password: '${ awskms (blob `s3://bank-vaults/encrypted/db-creds?region=eu-west-1`) }'
          roles:
            - name: app
              db_name: mysql
              creation_statements: "CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}'; GRANT ALL ON `app\_%`.* TO '{{name}}'@'%';"
              default_ttl: 2m
              max_ttl: 10m

  envsConfig:
    - name: ENCRYPTED_DB_CREDS
      value: "SomeAWSKMSEncryptedString" # This should be the base64-encoded ciphertext blob
    - name: AWS_ACCESS_KEY_ID # If you're not using an EC2 instance role, or something annotation-based like kube2iam, set the appropriate credentials here
    - name: AWS_SECRET_ACCESS_KEY # But you should never hard-code credentials and keep them in source control :)
    - name: AWS_REGION
      value: us-east-1

  # Marks presence of Istio, which influences things like port namings
  istioEnabled: false

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-file
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
