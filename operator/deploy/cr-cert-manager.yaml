apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name: "vault"
spec:
  size: 1
  image: vault:1.6.0
  bankVaultsImage: ghcr.io/banzaicloud/bank-vaults:latest

  # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
  serviceAccount: vault

  # Specify existing secret contains TLS certificate (accepted secret type: kubernetes.io/tls)
  # If it is set, generating certificate will be disabled
  # existingTlsSecretName: selfsigned-cert-tls

  # Specify threshold for renewing certificates. Valid time units are "ns", "us", "ms", "s", "m", "h".
  # tlsExpiryThreshold: 168h

  # Use local disk to store Vault file data, see config section.
  volumes:
    - name: vault-file
      persistentVolumeClaim:
        claimName: vault-file

  volumeMounts:
    - name: vault-file
      mountPath: /vault/file

  # Support for distributing the generated CA certificate Secret to other namespaces.
  # Define a list of namespaces or use ["*"] for all namespaces.
  caNamespaces:
    - "cert-manager"
    - "istio-system"

  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:

  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    storage:
      file:
        path: "/vault/file" # An example how Vault config environment interpolation can be used
    listener:
      tcp:
        address: "0.0.0.0:8200"
        # Uncommenting the following line and deleting tls_cert_file and tls_key_file disables TLS
        # tls_disable: true
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    telemetry:
      statsd_address: localhost:9125
    ui: true

  # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
  # The repository also contains a lot examples in the test/deploy and operator/deploy directories.
  externalConfig:
    policies:
      - name: allow_secrets
        rules: path "secret/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }
      - name: allow_pki
        rules: path "pki/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }
    auth:
      - type: kubernetes
        roles:
          # Allow the istiod pod in the istio-system namespace to use the secret KV store
          - name: istiod
            bound_service_account_names: ["istiod-service-account"]
            bound_service_account_namespaces: ["istio-system"]
            policies: ["allow_secrets"]
            ttl: 1h
          # Allow the cert-manager pod in the cert-manager namespace to use the PKI engine
          - name: cert-manager
            bound_service_account_names: ["cert-manager"]
            bound_service_account_namespaces: ["cert-manager"]
            policies: ["allow_pki"]
            ttl: 1h

    secrets:
      - path: secret
        type: kv
        description: General secrets.
        options:
          version: 2

      - type: pki
        description: Vault PKI Backend
        config:
          default_lease_ttl: 144h
          max_lease_ttl: 144h
        configuration:
          config:
          - name: urls
            issuing_certificates: https://vault.default:8200/v1/pki/ca
            crl_distribution_points: https://vault.default:8200/v1/pki/crl
          root/generate:
          - name: exported
            common_name: vault.default
            create_only: true
            save_to: "secret/data/pki/ca"
          roles:
          - name: kafka-users
            allow_any_name: true
            allowed_uri_sans: ["spiffe://*"]
            ttl: 144h

  vaultEnvsConfig:
    - name: VAULT_LOG_LEVEL
      value: debug

  # Marks presence of Istio, which influences things like port namings
  istioEnabled: true

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-file
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
