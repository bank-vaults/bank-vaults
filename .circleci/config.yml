version: 2.1

orbs:
  helm: banzaicloud/helm@0.0.7

jobs:
  check:
    docker:
      - image: circleci/golang:1.13
        environment:
          GOFLAG: -mod=readonly
      - image: vault:1.2.3
        environment:
          SKIP_SETCAP: true
          VAULT_DEV_ROOT_TOKEN_ID: 227e1cce-6bf7-30bb-2d2a-acc854318caf

    resource_class: small

    steps:
      - checkout

      - run:
          name: Install dependencies
          command: go mod download

      # NOTE: Disable license check for now, because we don't wan't to leak a GITHUB_TOKEN in external PRs.
      # It is enabled in the GitHub Actions build as a backup.
      # 
      # - restore_cache:
      #     name: Restore license cache
      #     keys:
      #         - licensei-v3-{{ checksum "go.sum" }}
      #         - licensei-v3

      # - run:
      #     name: Download license information for dependencies
      #     command: make license-cache

      # - save_cache:
      #     name: Save license cache
      #     key: licensei-v3-{{ checksum "go.sum" }}
      #     paths:
      #         - .licensei.cache

      # - run:
      #     name: Check dependency licenses
      #     command: make license-check

      - run:
          name: Run verification
          environment:
            VAULT_ADDR: http://localhost:8200
            VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf
          command: make check

  acceptance-test:
    machine:
      image: circleci/classic:201808-01
      docker_layer_caching: true

    environment:
      GO_VERSION: "1.13.1"
      K8S_VERSION: v1.15.3
      VAULT_VERSION: "1.2.3"
      KUBECONFIG: /home/circleci/.kube/config
      KURUN_VERSION: "0.2.5"
      MINIKUBE_VERSION: v1.4.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
      GOPATH: /go
      GOPROXY: https://proxy.golang.org
      DOCKER_LATEST: 1
      GIN_MODE: release

    steps:
      - run:
          name: Setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/

      - run:
          name: Start minikube
          background: true
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 4096 --kubernetes-version=${K8S_VERSION}

      - run:
          name: Setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config

      - checkout

      - run:
          name: Create go directory
          command: |
            sudo mkdir /go
            sudo chmod 777 /go

      - run:
          name: Setup golang
          command: |
            sudo rm -rf /usr/local/go
            curl -Lo go.linux-amd64.tar.gz https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz && sudo tar -C /usr/local -xzf go.linux-amd64.tar.gz && rm go.linux-amd64.tar.gz

      - run:
          name: Build Docker images
          command: |
            make docker
            make docker-operator
            make docker-vault-env
            make docker-webhook
          no_output_timeout: 30m

      - run:
          name: Wait for minikube
          command: |
            timeout 180s bash \<<EOT
              set -o pipefail
              function is_ready()
              {
                kubectl get nodes -o json \
                  | jq '.items[].status.conditions[] | select(.type=="Ready" and .status=="True")'
              }

              until is_ready
              do
                sleep 1
              done
            EOT

      - run:
          name: Install helm and kurun
          command: |
            # helm
            curl -L https://git.io/get_helm.sh | bash
            helm init --wait
            helm repo add banzaicloud-stable https://kubernetes-charts.banzaicloud.com/
            # kurun
            curl -Lo kurun https://github.com/banzaicloud/kurun/releases/download/${KURUN_VERSION}/kurun-linux-amd64 && chmod +x kurun && sudo mv kurun /usr/local/bin/


      - run:
          name: Operator and webhook acceptance test
          command:
            hack/acceptance-test.sh

  publish-chart:
    executor: helm/helm3
    resource_class: small
    parameters:
      charts-dir:
        default: charts
        description: Path of helm chart(s)
        type: string
    steps:
      - checkout
      - helm/setup-repositories:
          chartmuseum-url: 'https://kubernetes-charts.banzaicloud.com'
      - helm/check-parameters:
          charts-dir: charts
      - helm/update-dependencies:
          charts-dir: charts
      - helm/build:
          charts-dir: charts
      - run:
          name: Helm push
          command: |
            cd /workspace/tgz
            tgz="$(find . -name '*.tgz')"
            curl \
              --silent \
              --show-error \
              --fail \
              -X POST \
              -u "${HELM_REPO_USERNAME}:${HELM_REPO_PASSWORD}" \
              --data-binary "@${tgz}" \
              "https://kubernetes-charts.banzaicloud.com/api/charts"

workflows:
  version: 2
  ci:
    jobs:
      - check
      - acceptance-test:
          requires:
            - check

  helm-chart:
    jobs:
      - helm/lint-chart:
          executor: helm/helm2
          charts-dir: charts
          filters:
            tags:
              ignore: /.*/

      - publish-chart:
          context: helm
          charts-dir: charts
          filters:
            tags:
              only: /chart\/\S+\/\d+.\d+.\d+/
            branches:
              ignore: /.*/
