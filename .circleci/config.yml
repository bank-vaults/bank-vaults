# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    machine:
      image: circleci/classic:201808-01
      docker_layer_caching: true

    environment:
      GO_VERSION: "1.11.4"
      K8S_VERSION: v1.12.0
      VAULT_VERSION: "1.0.0"
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v0.31.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
      GOPATH: /home/circleci/go

    working_directory: /home/circleci/go/src/github.com/banzaicloud/bank-vaults
    steps:
      - checkout

    #   - restore_cache:
    #       name: Restore build dependencies
    #       keys:
    #       - build-deps-v2-{{ .Branch }}-{{ checksum "Makefile" }}
    #       - build-deps-v2-{{ .Branch }}
    #       - build-deps-v2-master
    #       - build-deps-v2

    #   - restore_cache:
    #       name: Restore dependencies
    #       keys:
    #       - gopkg-v2-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
    #       - gopkg-v2-{{ .Branch }}
    #       - gopkg-v2-master
    #       - gopkg-v2

    #   - run:
    #       name: Install dependencies
    #       command: make vendor

    #   - save_cache:
    #       name: Save dependencies
    #       key: gopkg-v2-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
    #       paths:
    #       - vendor/
      
    #   - run:
    #       name: Install license checker
    #       command: curl https://raw.githubusercontent.com/goph/licensei/master/install.sh | bash -s v0.0.7

    #   - restore_cache:
    #       keys:
    #       - licensei-v2-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
    #       - licensei-v2-{{ .Branch }}
    #       - licensei-v2-master
    #       - licensei-v2

    #   - run:
    #       name: Download license information for dependencies
    #       command: make license-cache

    #   - save_cache:
    #       key: licensei-v2-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
    #       paths:
    #         - .licensei.cache

    #   - run:
    #       name: Check dependency licenses
    #       command: make license-check
      
    #   - run:
    #       name: Setup golang
    #       command: |
    #         sudo rm -rf /usr/local/go
    #         curl -Lo go.linux-amd64.tar.gz https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz && sudo tar -C /usr/local -xzf go.linux-amd64.tar.gz

    #   - run:
    #       name: Start Vault
    #       command:
    #           docker run -d -e SKIP_SETCAP=true -e VAULT_DEV_ROOT_TOKEN_ID=227e1cce-6bf7-30bb-2d2a-acc854318caf -p 8200:8200 vault:${VAULT_VERSION}

    #   - run:
    #       name: Run verification
    #       command:
    #           make check
    #       environment:
    #         VAULT_ADDR: http://localhost:8200
    #         VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

    #   - run:
    #       name: Build Docker images
    #       command: |
    #         make docker
    #         make docker-operator
    #         docker build -f Dockerfile.vault-env -t banzaicloud/vault-env:latest .
    #         docker build -f Dockerfile.webhook -t banzaicloud/vault-secrets-webhook:latest .

      - run:
          name: Setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config

      - run:
          name: Setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/

      - run:
          name: Start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 4096 --kubernetes-version=${K8S_VERSION}

      - run:
          name: Operator acceptance test
          command:
            hack/acceptance-test.sh
